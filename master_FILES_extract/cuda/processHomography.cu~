#include <cuda.h>
#include <cuda_runtime.h>
#include <stdio.h>

#include <cublas_v2.h>

#include "global_var.h"

__global__ void processHomography(cublasStatus_t *returnStatus,
                                  float2 *f2_SquareList,
                                  float  **A,
                                  float  **AInv,
                                  float  **B,
                                  float  **C,
                                  float  **CInv,
                                  float  *Alpha,
                                  float  *Beta,
                                  int    *dAUPivots,
                                  int    *dAUInfo,
                                  int nodeMax)
{
    int iindiceMarker = threadIdx.x;

    if(iindiceMarker>=nodeMax)
        return;

    __shared__ float2 PointsRes[4];

    if(threadIdx.x == 0)
    {
        PointsRes[0].x = 0;
        PointsRes[0].y = 0;

        PointsRes[1].x = _MARKER_MAX_SIZE;
        PointsRes[1].y = 0;

        PointsRes[2].x = _MARKER_MAX_SIZE;
        PointsRes[2].y = _MARKER_MAX_SIZE;

        PointsRes[3].x = 0;
        PointsRes[3].y = _MARKER_MAX_SIZE;
    }

    syncthreads();

    int iptrA = 0;
    int iptrB = 0;

    float * fTmp_A = A[iindiceMarker];
    float * fTmp_B = B[iindiceMarker];

    for(int c =0;c<4;c++)
    {
        float2 Corner;
        Corner.x = f2_SquareList[iindiceMarker*4+c].x;
        Corner.y = f2_SquareList[iindiceMarker*4+c].y;

        fTmp_A[iptrA++] = Corner.x;
        fTmp_A[iptrA++] = Corner.y;
        fTmp_A[iptrA++] = 1;
        fTmp_A[iptrA++] = 0;
        fTmp_A[iptrA++] = 0;
        fTmp_A[iptrA++] = 0;
        fTmp_A[iptrA++] = -Corner.x*PointsRes[c].x;
        fTmp_A[iptrA++] = -Corner.y*PointsRes[c].x;
        fTmp_B[iptrB++] = PointsRes[c].x;

        fTmp_A[iptrA++] = 0;
        fTmp_A[iptrA++] = 0;
        fTmp_A[iptrA++] = 0;
        fTmp_A[iptrA++] = Corner.x;
        fTmp_A[iptrA++] = Corner.y;
        fTmp_A[iptrA++] = 1;
        fTmp_A[iptrA++] = -Corner.x*PointsRes[c].y;
        fTmp_A[iptrA++] = -Corner.y*PointsRes[c].y;
        fTmp_B[iptrB++] = PointsRes[c].y;

    }

    syncthreads();

    if(threadIdx.x == 0 )
    {
        cublasHandle_t cu_cublasHandle;
        cublasStatus_t status = cublasCreate(&cu_cublasHandle);

        // Calculate inv(A)
        cublasSgetrfBatched(cu_cublasHandle, 8, A, 8, dAUPivots, dAUInfo, nodeMax);
        cudaDeviceSynchronize();
        cublasSgetriBatched(cu_cublasHandle, 8, (const float **)A, 8, dAUPivots, AInv, 8, dAUInfo, nodeMax);
        cudaDeviceSynchronize();

        // Calculate H = inv(A)*B
        cublasSgemmBatched(cu_cublasHandle,CUBLAS_OP_T,CUBLAS_OP_N,8,1,8,Alpha,(const float **)AInv ,8,(const float **)B,8,Beta,C,8,nodeMax);
        cudaDeviceSynchronize();

        //Calculate the inv(H)
        for(int i=0;i<nodeMax;i++)
        {
            float *Clocal = C[i];
            Clocal[8] = 1;
        }
        cublasSgetrfBatched(cu_cublasHandle, 3, C, 3, dAUPivots, dAUInfo, nodeMax);
        cudaDeviceSynchronize();
        cublasSgetriBatched(cu_cublasHandle, 3, (const float **)C, 3, dAUPivots, CInv, 3, dAUInfo, nodeMax);
        cudaDeviceSynchronize();

        cublasDestroy(cu_cublasHandle);

//        *returnStatus = status;
    }
    syncthreads();

}
