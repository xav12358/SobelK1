#include "markerdetector.h"



#include "cleanBuffers.cu"
#include "extractMarkers.cu"


#include <iostream>
#include <math.h>
#include <string>
#include <stdio.h>
#include <stdlib.h>

#include <cv.h>
#include <opencv2/highgui/highgui.hpp>



////////////////////////////
/// \brief MarkerDetector_gpu::MarkerDetector_gpu
/// \param rows
/// \param cols
///
MarkerDetector_gpu::MarkerDetector_gpu(int rows,int cols):
    icols(cols),
    irows(rows),
    threads(BLOCK_SIZE_X,BLOCK_SIZE_Y),
    blocks(ceil(cols/BLOCK_SIZE_X),ceil(rows/BLOCK_SIZE_Y))
{

    if(VERBOSE)
        std::cout << "- MarkerDetector_gpu contructeur "<< std::endl;

    checkCudaErrors(cudaMalloc((void **)&u8_GrayImage_Device,rows*cols*sizeof(u_int8_t)));
    checkCudaErrors(cudaMalloc((void **)&u32_Buffer0_Device,rows*cols*sizeof(u_int32_t)));
    checkCudaErrors(cudaMalloc((void **)&i32_BufferDx_Device,rows*cols*sizeof(int32_t)));
    checkCudaErrors(cudaMalloc((void **)&i32_BufferDy_Device,rows*cols*sizeof(int32_t)));
    checkCudaErrors(cudaMalloc((void **)&u32_SobelImage_Device,rows*cols*sizeof(u_int32_t)));
    checkCudaErrors(cudaMalloc((void **)&u32_BufferArea_Device,rows*cols*sizeof(u_int32_t)));
    checkCudaErrors(cudaMalloc((void **)&u32_Buffer5_Device,rows*cols*sizeof(u_int32_t)));
    checkCudaErrors(cudaMalloc((void **)&u32_BufferCornerList_Device,rows*cols*sizeof(u_int32_t)));
    checkCudaErrors(cudaMalloc((void**)&u8_extractedMarkers56p_Device,_MARKER_MAX_SIZE*_MARKER_MAX_SIZE*_MAX_NODE*sizeof(u_int8_t)));
    checkCudaErrors(cudaMalloc((void**)&u8_extractedMarkers7p_Device,_MARKER_SMALL_SIZE*_MARKER_SMALL_SIZE*_MAX_NODE*sizeof(u_int8_t)));
    checkCudaErrors(cudaMalloc((void**)&tranformationList_Device,_MAX_NODE*sizeof(TransformationM)));
    checkCudaErrors(cudaMalloc((void**)&u8_MarkerListToSearch5p_Device,1024*5*5*sizeof(u_int8_t)));
    checkCudaErrors(cudaMalloc((void**)&u16_DetectedId_Device,_MAX_NODE*sizeof(u_int16_t)));
    checkCudaErrors(cudaMalloc((void**)&f2_SquareList_Device,4*_MAX_NODE*sizeof(float2)));
    checkCudaErrors(cudaMalloc((void**)&u8_ptDynamicThreshold_Device,_MAX_NODE*sizeof(u_int8_t)));

    /////////////////////////////////
    //    To Do: use cudaHostAlloc
    u32_BufferCornerList_Host   = (u_int32_t*)malloc(rows*cols*sizeof(u_int32_t));
    u8_extractedMarkers56p_Host = (u_int8_t *)malloc(_MARKER_MAX_SIZE*_MARKER_MAX_SIZE*_MAX_NODE*sizeof(u_int8_t));
    u8_extractedMarkers7p_Host  = (u_int8_t *)malloc(_MARKER_SMALL_SIZE*_MARKER_SMALL_SIZE*_MAX_NODE*sizeof(u_int8_t));
    tranformationList_Host      = (TransformationM *)malloc(_MAX_NODE*sizeof(TransformationM));
    u8_MarkerListToSearch5p_Host= (u_int8_t *)malloc(1024*5*5*sizeof(u_int8_t));
    u16_DetectedId_Host         = (u_int16_t*)malloc(_MAX_NODE*sizeof(u_int16_t));
    f2_SquareList_Host          = (float2*)malloc(4*_MAX_NODE*sizeof(float2));
    u8_ptDynamicThreshold_Host  = (u_int8_t*)malloc(_MAX_NODE*sizeof(u_int8_t));


    // Create the list of 1024 markers
    createMarkerList();
    // create the variables for cublas operations
    createCublasValue();

    Image_Gray.filterMode = cudaFilterModeLinear;
    Image_Gray.normalized = false;
    cudaChannelFormatDesc  desc = cudaCreateChannelDesc<unsigned char>();
    checkCudaErrors(cudaBindTexture2D(0,&Image_Gray,u8_GrayImage_Device, &desc, icols , irows, icols));

    cudaEventCreate(&Start,0);
    cudaEventCreate(&Stop,0);

    pFile = fopen ("myfile.csv","a");
    fputs ("SOBEL;CCL;Blobs;Corners;CornersGPU;Refine;ExtractMarker;DetectId\n",pFile);

}

/////////////////////////////////////
/// \brief MarkerDetector_gpu::~MarkerDetector_gpu
///
MarkerDetector_gpu::~MarkerDetector_gpu()
{
    // free device memory
    checkCudaErrors(cudaFree(u8_GrayImage_Device));
    checkCudaErrors(cudaFree(u32_Buffer0_Device));
    checkCudaErrors(cudaFree(i32_BufferDx_Device));
    checkCudaErrors(cudaFree(i32_BufferDy_Device));
    checkCudaErrors(cudaFree(u32_SobelImage_Device));
    checkCudaErrors(cudaFree(u32_BufferArea_Device));
    checkCudaErrors(cudaFree(u32_Buffer5_Device));
    checkCudaErrors(cudaFree(u32_BufferCornerList_Device));
    checkCudaErrors(cudaFree(u8_extractedMarkers56p_Device));
    checkCudaErrors(cudaFree(u8_extractedMarkers7p_Device));
    checkCudaErrors(cudaFree(u8_MarkerListToSearch5p_Host));
    checkCudaErrors(cudaFree(tranformationList_Device));

    checkCudaErrors(cudaFree(u8_MarkerListToSearch5p_Device));
    checkCudaErrors(cudaFree(u16_DetectedId_Device));
    checkCudaErrors(cudaFree(f2_SquareList_Device));

}


///////////////////////////////////
/// \brief createCublasValue : Create all the environnement for cublas process
///
void MarkerDetector_gpu::createCublasValue(void)
{


    h_AA    = (float**)malloc(_MAX_NODE * sizeof(float*));
    h_AAInv = (float**)malloc(_MAX_NODE * sizeof(float*));
    h_BB    = (float**)malloc(_MAX_NODE * sizeof(float*));
    h_CC    = (float**)malloc(_MAX_NODE * sizeof(float*));
    h_CCInv = (float**)malloc(_MAX_NODE * sizeof(float*));

    for (int i = 0; i < _MAX_NODE; i++){
        cudaMalloc((void **)&h_AA[i], 8*8 * sizeof(float));
        cudaMalloc((void **)&h_AAInv[i], 8*8 * sizeof(float));
        cudaMalloc((void **)&h_BB[i], 8 * sizeof(float));
        cudaMalloc((void **)&h_CC[i], 9 *sizeof(float));
        cudaMalloc((void **)&h_CCInv[i], 9 *sizeof(float));
    }

    cudaMalloc(&d_AA, _MAX_NODE * sizeof(float*));
    cudaMalloc(&d_AAInv, _MAX_NODE * sizeof(float*));
    cudaMalloc(&d_BB, _MAX_NODE * sizeof(float*));
    cudaMalloc(&d_CC, _MAX_NODE * sizeof(float*));
    cudaMalloc(&d_CCInv, _MAX_NODE * sizeof(float*));
    checkCudaErrors(cudaMemcpy(d_AA, h_AA,_MAX_NODE * sizeof(float*), cudaMemcpyHostToDevice));
    checkCudaErrors(cudaMemcpy(d_AAInv, h_AAInv,_MAX_NODE * sizeof(float*), cudaMemcpyHostToDevice));
    checkCudaErrors(cudaMemcpy(d_BB, h_BB, _MAX_NODE * sizeof(float*), cudaMemcpyHostToDevice));
    checkCudaErrors(cudaMemcpy(d_CC, h_CC, _MAX_NODE * sizeof(float*), cudaMemcpyHostToDevice));
    checkCudaErrors(cudaMemcpy(d_CCInv, h_CCInv, _MAX_NODE * sizeof(float*), cudaMemcpyHostToDevice));

    checkCudaErrors(cudaMalloc(&dAUPivots, _MAX_NODE * sizeof(int)));
    checkCudaErrors(cudaMalloc(&dAUInfo, _MAX_NODE* sizeof(int)));


    cudaMalloc(&d_Alpha, _MAX_NODE * sizeof(float));
    cudaMalloc(&d_Beta, _MAX_NODE * sizeof(float));

    h_Alpha = (float*)malloc(_MAX_NODE * sizeof(float));
    h_Beta = (float*)malloc(_MAX_NODE * sizeof(float));;

    for(int i=0;i<_MAX_NODE;i++)
    {
        h_Alpha[i] = 1.0;
        h_Beta[i]  = 0.0;
    }

    checkCudaErrors(cudaMemcpy(d_Alpha,h_Alpha,_MAX_NODE*sizeof(float), cudaMemcpyHostToDevice));
    checkCudaErrors(cudaMemcpy(d_Beta,h_Beta,_MAX_NODE*sizeof(float), cudaMemcpyHostToDevice));

}


///////////////////////////////////
/// \brief MarkerDetector_gpu::copyImageToDevice
///
void MarkerDetector_gpu::copyImageToDevice(u_int8_t *ptSrcHost, int rows,int cols)
{
    if(VERBOSE)
        std::cout << "- Copy to the device memory " << std::endl;

    checkCudaErrors(cudaMemcpy(u8_GrayImage_Device,ptSrcHost,rows*cols*sizeof(u_int8_t),cudaMemcpyHostToDevice));

}

///////////////////////////////////////////////
/// \brief MarkerDetector_gpu::createMarkerList
///
void MarkerDetector_gpu::createMarkerList(void)
{
    if(VERBOSE)
        std::cout << "- CreateMarkerList "<< std::endl;

    int ids[4] = {0x10, 0x17, 0x09, 0x0e};
    for(int id=0;id<1024;id++)
    {
        for (int y = 0; y < 5; y++) {
            int index = (id >> 2 * (4 - y)) & 0x0003;
            int val = ids[index];
            for (int x = 0; x < 5; x++) {
                if ((val >> (4 - x)) & 0x0001)
                    u8_MarkerListToSearch5p_Host[x+y*5 +5*5*id] = 255;
                else
                    u8_MarkerListToSearch5p_Host[x+y*5 +5*5*id] = 0;
            }
        }
    }

    checkCudaErrors(cudaMemcpy(u8_MarkerListToSearch5p_Device,u8_MarkerListToSearch5p_Host,1023*5*5*sizeof(u_int8_t),cudaMemcpyHostToDevice));
}







//////////////////////////////////////////
/// \brief MarkerDetector_gpu::processExtractMarkers : Process the homograhys and extract the 56x56 and 7x7 markers
///
void MarkerDetector_gpu::processExtractMarkers(u_int8_t *ptSrcHost)
{


    cudaEventRecord(Start,0);

    ////////////////////////////////////////
    // Launch the warp transformation

    dim3 threadsM(BLOCK_SIZE_X,BLOCK_SIZE_Y);
    dim3 blocksM(1,1);

    ////////////////////////////////
    // HIGH resolution
    ExtractMarker56p<<<blocksM,threadsM>>>(u8_extractedMarkers56p_Device);
    // Copy back the warped marker
    checkCudaErrors(cudaMemcpy(u8_extractedMarkers56p_Host,u8_extractedMarkers56p_Device,_MARKER_MAX_SIZE*_MARKER_MAX_SIZE,cudaMemcpyDeviceToHost));


    cudaEventRecord(Stop, 0);
    cudaEventSynchronize(Start);
    cudaEventSynchronize(Stop);
    cudaEventElapsedTime(&dt_ms[6], Start, Stop);

    int i = 0;
    //for(int i=0;i<u16_MaxFeatureToProcess;i++ )
    {
        cv::Mat imageMarker;
        imageMarker.create(_MARKER_MAX_SIZE,_MARKER_MAX_SIZE,CV_8U);

        for(int y00=0;y00<_MARKER_MAX_SIZE;y00++)
        {
            for(int x00=0;x00<_MARKER_MAX_SIZE;x00++)
            {
                imageMarker.data[x00+y00*_MARKER_MAX_SIZE] = u8_extractedMarkers56p_Host[i*_MARKER_MAX_SIZE*_MARKER_MAX_SIZE +x00+y00*_MARKER_MAX_SIZE];
            }
        }


        char buffer[12];
        snprintf(buffer, 12,"Marker%d",i);
        cv::imshow(buffer,imageMarker);
        cv::waitKey(-1);
    }
}



///////////////////////
/// \brief MarkerDetector_gpu::run
/// \param ptSrcHost
/// \param rows
/// \param cols
/// \param ipass
///
void MarkerDetector_gpu::run(u_int8_t *ptSrcHost,int rows,int cols,int ipass)
{
    ////////////////////////////
    // Clean all buffers
    std::cout << "- Clean buffers " << std::endl;
    Pass0_clean<<<blocks,threads>>>( i32_BufferDx_Device,
                                     i32_BufferDy_Device,
                                     u32_SobelImage_Device,
                                     u32_Buffer0_Device,
                                     u32_BufferArea_Device,
                                     u32_Buffer5_Device,
                                     u32_BufferCornerList_Device,
                                     icols,irows);

    ///////////////////////////////////
    // Copy to the device memory
    copyImageToDevice(ptSrcHost,rows,cols);


    // Extract each marker in low resolution 7x7 or 5x5
    processExtractMarkers(ptSrcHost);
    //GPU(ptSrcHost);


    char buffer[150];
    snprintf(buffer, 150, "%.5f;%.5f;%.5f;%.5f;%.5f;%.5f;%.5f;%.5f\n", dt_ms[0], dt_ms[1], dt_ms[2], dt_ms[3], dt_ms[4], dt_ms[5], dt_ms[6], dt_ms[7] );
    fputs (buffer,pFile);
    fflush(pFile);


}
